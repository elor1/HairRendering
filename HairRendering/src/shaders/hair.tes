#version 440

layout(isolines) in;

out vec3 tangent_te;
out float tessx_te;
out float colourChange_te;

const int MAX_VERTICES = 64; //Max number of hair vertices
const int NOISE_LAYERS = 3;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform vec3 vertexData[MAX_VERTICES];
uniform int numHairSegments;
uniform int numSplineVertices;
uniform float groupSpread;
uniform vec3 triangleFace[2];
uniform float length;
uniform sampler2D noiseTexture;
uniform float noiseAmplitude;
uniform float noiseFrequency;

float Random(vec2 x)
{
    return fract(sin(dot(x, vec2(12.9898, 78.233))) * 43758.5453);
}

vec3 Spline(float tessCoordX)
{
    float length = clamp(tessCoordX, 0.0f, 1.0f) * numHairSegments;
    float fractional = fract(length);

    int index1 = int(length);
    int index0 = max(index1 - 1, 0);
    int index2 = min(index1 + 1, numHairSegments);
    int index3 = min(index2 + 1, numHairSegments);

    vec3 m1 = (vertexData[index2] - vertexData[index0]) / 2.0f;
    vec3 m2 = (vertexData[index1] - vertexData[index3]) / 2.0f;

    return mix(vertexData[index1] + m1 * fractional, vertexData[index2] + m2 * (1 - fractional), smoothstep(0.0f, 1.0f, fractional));
}

vec3 SplineOffset(in vec2 tessCoord)
{
    vec3 position = Spline(tessCoord.x);

    //Place hairs in circle around guide
    float random = sqrt(Random(vec2(tessCoord.y)));
    float theta = Random(vec2(tessCoord.y * 0.9f)) * 6.283;
    position += groupSpread * cos(theta) * random * triangleFace[0];
    position += groupSpread * sin(theta) * random * triangleFace[1];

    //Add noise
    float noise = tessCoord.x * noiseAmplitude;
    tessCoord *= vec2((length * 2.0f) * noiseFrequency, 0.2f);
    position.x += (1.0f - 2.0f * texture(noiseTexture, tessCoord.xy).r) * noise * 0.5f;
    position.y += (1.0f - 2.0f * texture(noiseTexture, tessCoord.xy + 0.1f).r) * noise * 0.5f;
    position.z += (1.0f - 2.0f * texture(noiseTexture, tessCoord.xy + 0.2).r) * noise * 0.5f;

    return position;
}

void main()
{
	vec3 position = SplineOffset(gl_TessCoord.xy);

    //Calculate tangent
    vec3 nextPosition = SplineOffset(vec2(gl_TessCoord.x + 1.0f / (numSplineVertices - 1), gl_TessCoord.y));
    vec3 previousPosition = SplineOffset(vec2(gl_TessCoord.x - 1.0f / (numSplineVertices - 1), gl_TessCoord.y));

    tangent_te = (view * model * vec4(nextPosition - previousPosition, 0.0f)).xyz;
    tessx_te = gl_TessCoord.x;
    colourChange_te = texture(noiseTexture, triangleFace[0].xy * gl_TessCoord.yy).r;

    gl_Position = view * model * vec4(position, 1.0f);
}