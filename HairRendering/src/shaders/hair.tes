#version 440

layout(isolines) in;

out vec3 tangent_te;
out float tessx_te;

const int MAX_VERTICES = 64; //Max number of hair vertices
const int NOISE_LAYERS = 3;

uniform mat4 model, view, projection;
uniform vec3 vertexData[MAX_VERTICES];
uniform int numHairSegments;
uniform int numSplineVertices;
uniform float groupSpread;
uniform float noiseAmplitude;
uniform vec3 triangleFace[2];
uniform sampler2D noiseTexture;

float Random(vec2 x)
{
    return fract(sin(dot(x, vec2(12.9898, 78.233))) * 43758.5453);
}

vec3 Spline(float tessCoordX)
{
    float length = clamp(tessCoordX, 0.0f, 1.0f) * numHairSegments;
    float fract = fract(length);

    int index1 = int(length);
    int index0 = max(index1 - 1, 0);
    int index2 = min(index1 + 1, numHairSegments);
    int index3 = min(index2 + 1, numHairSegments);

    vec3 point0 = vertexData[index0];
    vec3 point1 = vertexData[index1];
    vec3 point2 = vertexData[index2];
    vec3 point3 = vertexData[index3];

    vec3 m1 = (point2 - point0) / 2.0f;
    vec3 m2 = (point1 - point3) / 2.0f;

    return mix(point1 + m1 * fract, point2 + m2 * (1 - fract), smoothstep(0.0f, 1.0f, fract));
}

vec3 SplineOffset(in vec2 tessCoord)
{
    vec3 position = Spline(tessCoord.x);
    

    //Offset each hair in circle around guide hair
    float r = sqrt(Random(vec2(tessCoord.y)));
    float theta = 6.283 * Random(vec2(0.9f * tessCoord.y));
    position += groupSpread * r * cos(theta) * triangleFace[0];
    position += groupSpread * r * sin(theta) * triangleFace[1];

    //Add noise
    float noise = noiseAmplitude * tessCoord.x;
    tessCoord *= 0.4f;
    position.x += noise * (1.0f - 2.0f * texture(noiseTexture, tessCoord.xy).r) * 0.5f;
    position.y += noise * (1.0f - 2.0f * texture(noiseTexture, tessCoord.xy + 0.01f).r) * 0.5f;
    position.z += noise * (1.0f - 2.0f * texture(noiseTexture, tessCoord.xy + 0.02).r) * 0.5f;

    return position;
}

void main()
{
	vec3 position = SplineOffset(gl_TessCoord.xy);
    //position.x += groupWidth * (gl_TessCoord.y - 0.5f);

    //Calculate tangent
    vec3 previousPosition = SplineOffset(vec2(gl_TessCoord.x - 1.0f / (numSplineVertices - 1), gl_TessCoord.y));
    vec3 nextPosition = SplineOffset(vec2(gl_TessCoord.x + 1.0f / (numSplineVertices - 1), gl_TessCoord.y));
    tangent_te = (view * model * vec4(nextPosition - previousPosition, 0.0f)).xyz;
    tessx_te = gl_TessCoord.x;

    gl_Position = view * model * vec4(position, 1.0f);
}